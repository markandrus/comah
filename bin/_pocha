#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander'),
  path = require('path'),
  fs = require('fs'),
  resolve = path.resolve,
  exists = fs.existsSync || path.existsSync,
  Pocha = require('../lib/index'),
  utils = require('mocha').utils,
  join = path.join,
  cwd = process.cwd(),
  reportersPath = '../lib/reporters/',
  runnersPath = '../lib/runners/',
  ParallelRunner = require(runnersPath + 'parallel'),
  ConcurrentRunner = require(runnersPath + 'concurrent');

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Files.
 */

var files = [];

/**
 * Globals.
 */

var globals = [];

/**
 * Requires.
 */

var requires = [];

// options

var indent = '                                ';

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[debug] [options] [files]')
  .option('-R, --reporter <name>', 'specify the reporter to use', 'spec')
  .option('-u, --ui <name>', 'specify user-interface (bdd)', 'bdd')
  .option('-l, --list', 'list the tests instead of running them')
  .option('-p, --tests <test>,...', 'specify a subset of tests in the test files to run', list)
  .option('-p, --pattern <pattern>', 'specify a prefix or regex for filtering tests (regexes should be enclosed in "/")')
  .option('-j, --jobs [number]', 'specify the number of jobs to run in parallel (no argument implies unbound; pass a ratio to also set concurrency)', ParallelRunner.DEFAULT_PARALLELISM)
  .option('-k, --concurrency [number]', 'specify the number of tests to run concurrently (no argument implies unbounded)', ConcurrentRunner.DEFAULT_CONCURRENCY)
  .option('--runner <name>', 'specify the runner to use', 'parallel')
  .option('--sequential', 'run tests sequentially (sets the runner to "sequential")')
  .option('--compilers <ext>:<module>,...', 'use the given module(s) to compile files', list, [])
  .option('--harmony', 'enable all harmony features (except typeof)')
  .option('--es_staging', 'enable all staged features')
  .option('--harmony-collections', 'enable harmony collections (sets, maps, and weak maps)')
  .option('--harmony-generators', 'enable harmony generators')
  .option('--harmony-proxies', 'enable harmony proxies')
  .option('--harmony_shipping', 'enable all shipped harmony fetaures (iojs)')
  .option('--harmony_arrow_functions', 'enable "harmony arrow functions" (iojs)')
  .option('--harmony_rest_parameters', 'enable "harmony rest parameters" (iojs)')
  .option('--harmony_proxies', 'enable "harmony proxies" (iojs)')
  .option('--harmony_classes', 'enable "harmony classes" (iojs)')
  .option('--interfaces', 'display available interfaces')
  .option('--reporters', 'display available reporters')
  .option('--runners', 'display available runners')

program.name = 'pocha';

// custom compiler support

var extensions = ['js'];
program.compilers.forEach(function(c) {
  var compiler = c.split(':')
    , ext = compiler[0]
    , mod = compiler[1];

  if (mod[0] == '.') mod = join(process.cwd(), mod);
  require(mod);
  extensions.push(ext);
});

// --reporters

program.on('reporters', function(){
  console.log();
  console.log('    spec - hierarchical spec list');
  console.log('    ipc - inter-process communication (IPC)');
  console.log();
  process.exit();
});

// --interfaces

program.on('interfaces', function(){
  console.log('');
  console.log('    bdd');
  console.log('');
  process.exit();
});

// --runners

program.on('runners', function(){
  console.log();
  console.log('    parallel - run tests in parallel');
  console.log('    concurrent - run tests concurrently');
  console.log('    sequential - run tests sequentially');
  console.log();
  process.exit();
});

// parse args

program.parse(process.argv);

// infinite stack traces

Error.stackTraceLimit = Infinity; // TODO: config

// reporter

var Reporter;

try {
  Reporter = require(reportersPath + program.reporter);
} catch (err) {
  try {
    Reporter = require(program.reporter);
  } catch (err) {
    throw new Error('reporter "' + program.reporter + '" does not exist');
  }
}

//args

var args = program.args;

// default files to test/*.{js,coffee}

if (!args.length) args.push('test');

args.forEach(function(arg){
  files = files.concat(utils.lookupFiles(arg, extensions, false));
});

// resolve

files = files.map(function(path){
  return resolve(path);
});

// load

// FIXME(mroberts): ...
var Runner = require(runnersPath + (program.sequential ? 'sequential' : program.runner));

var pocha = new Pocha(files, Reporter, new Runner());

if (program.tests) {
  program.pattern = '/' + program.tests.join('|') + '/';
}

if (program.list) {
  pocha.listTests(program.pattern);
  process.exit();
}

pocha.runTests(program.pattern);

process.on('SIGINT', function() { /* runner.abort(); */ })

/**
 * Parse list.
 */

function list(str) {
  return str.split(/ *, */);
}

/**
 * Hide the cursor.
 */

function hideCursor(){
  process.stdout.write('\u001b[?25l');
}

/**
 * Show the cursor.
 */

function showCursor(){
  process.stdout.write('\u001b[?25h');
}

/**
 * Stop play()ing.
 */

function stop() {
  process.stdout.write('\u001b[2K');
  clearInterval(play.timer);
}

/**
 * Play the given array of strings.
 */

function play(arr, interval) {
  var len = arr.length
    , interval = interval || 100
    , i = 0;

  play.timer = setInterval(function(){
    var str = arr[i++ % len];
    process.stdout.write('\u001b[0G' + str);
  }, interval);
}
